# Generated by Django 3.2.9 on 2023-11-22 10:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('password', models.CharField(max_length=100, verbose_name='Password')),
                ('name', models.CharField(max_length=20, verbose_name='Name')),
                ('phone', models.CharField(max_length=12, verbose_name='Phone')),
                ('address', models.CharField(blank=True, max_length=150, null=True, verbose_name='Address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(verbose_name='URL')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_en', models.CharField(max_length=100, verbose_name='Question (en)')),
                ('question_ua', models.CharField(max_length=100, verbose_name='Question (ua)')),
                ('category', models.CharField(choices=[('shop', 'Shop'), ('deliver', 'Deliver'), ('other', 'Other')], max_length=10, verbose_name='Category')),
                ('responce_en', models.CharField(max_length=500, verbose_name='Responce (en)')),
                ('responce_ua', models.CharField(max_length=500, verbose_name='Responce (ua)')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('price', models.FloatField(verbose_name='Price')),
                ('discount', models.FloatField(blank=True, default=0, verbose_name='Discount')),
                ('avr_rating', models.FloatField(blank=True, default=0, verbose_name='Avarange rating')),
                ('date_of_issue', models.DateField(verbose_name='Date of issue')),
                ('quantity', models.IntegerField(verbose_name='Quantity')),
                ('main_photo', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='product2', to='main.productphoto', verbose_name='Main photo')),
                ('photos', models.ManyToManyField(blank=True, related_name='product', to='main.ProductPhoto', verbose_name='Photos')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_price', models.FloatField(verbose_name='Product price')),
                ('color', models.CharField(max_length=6, verbose_name='Color')),
                ('quantity', models.IntegerField(verbose_name='Quantity')),
                ('datetime', models.DateTimeField(verbose_name='Date and time')),
                ('status', models.CharField(choices=[('is confirmed', 'Is confirmed'), ('on the way', 'On the way'), ('arrived', 'Arrived'), ('canceled', 'Canceled')], max_length=12, verbose_name='Status')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='main.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(verbose_name='Rating')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('datetime', models.DateTimeField(verbose_name='Date and time')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='main.product', verbose_name='Product')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedback', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('colors', models.CharField(max_length=70, verbose_name='Colors')),
                ('manufacturer', models.CharField(choices=[('samsung', 'Samsung'), ('xiomi', 'Xiomi'), ('apple', 'Apple'), ('other', 'Other')], max_length=10, verbose_name='Manufacturer')),
                ('os', models.CharField(choices=[('android', 'Android'), ('ios', 'IOS'), ('win', 'Window Mobile'), ('other', 'Other')], max_length=10, verbose_name='OS')),
                ('diagonal', models.FloatField(verbose_name='Diagonal (")')),
                ('horizontal_resolution', models.IntegerField(verbose_name='Horizontal resolution (px)')),
                ('vertical_resolution', models.IntegerField(verbose_name='Vertical resolution (px)')),
                ('matrix', models.CharField(choices=[('amoled', 'AMOLED'), ('damoled', 'Dynamic AMOLED'), ('ips', 'IPS'), ('lsd', 'LSD'), ('ltps', 'LTPS'), ('oled', 'OLED'), ('pls', 'PLS'), ('samoled', 'Super AMOLED'), ('tft', 'TFT'), ('tn', 'TN'), ('other', 'Other')], max_length=10, verbose_name='Matrix')),
                ('screen_frequency', models.IntegerField(verbose_name='Screen frequency(GHz)')),
                ('screen_material', models.CharField(max_length=50, verbose_name='Screen material')),
                ('connection_types', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(2, '2G'), (3, '3G'), (4, '4G'), (5, '5G')], max_length=7, null=True, verbose_name='Connection types')),
                ('sim_number', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3+')], verbose_name='Number of SIM')),
                ('sim_size', models.CharField(choices=[('full', 'full size SIM'), ('mini', 'mini-SIM'), ('micro', 'micro-SIM'), ('nano', 'nano-SIM'), ('other', 'Other')], max_length=5, verbose_name='SIM size')),
                ('ram', models.IntegerField(verbose_name='RAM (Gb)')),
                ('rom', models.IntegerField(verbose_name='ROM (Gb)')),
                ('additional_memory', models.CharField(max_length=20, verbose_name='Additional memory')),
                ('max_size_additional_memory', models.IntegerField(verbose_name='Max size of additional memory (Gb)')),
                ('main_camera', models.IntegerField(verbose_name='Main camera (Mp)')),
                ('number_main_cameras', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5+'), (0, '0')], verbose_name='Number of main cameras')),
                ('main_camera_features', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('autofocus', 'Autofocus'), ('video4k', '4K shooring support'), ('flash', 'Flash'), ('stabilization', 'Stabilization'), ('telephotolens', 'Telephoto lens'), ('wideanglelens', 'Wide angle lens'), ('ultrawidelens', 'Ultra wide angle lens')], max_length=79, null=True, verbose_name='Features of main camera')),
                ('main_camera_video', models.CharField(max_length=80, verbose_name='Main camera video')),
                ('main_camera_additions_en', models.TextField(blank=True, null=True, verbose_name='Main camera additions (en)')),
                ('main_camera_additions_ua', models.TextField(blank=True, null=True, verbose_name='Main camera additions (ua)')),
                ('front_camera', models.IntegerField(verbose_name='Front camera (Mp)')),
                ('front_camera_video', models.CharField(max_length=80, verbose_name='Front video')),
                ('front_camera_additions_en', models.TextField(blank=True, null=True, verbose_name='Front camera additions (en)')),
                ('front_camera_additions_ua', models.TextField(blank=True, null=True, verbose_name='Front camera additions (ua)')),
                ('processor', models.CharField(max_length=50, verbose_name='Processor')),
                ('videocore', models.CharField(max_length=50, verbose_name='Videocore')),
                ('number_cores', models.IntegerField(verbose_name='Number of cores')),
                ('processor_frequency', models.FloatField(verbose_name='Processor frequency (GHz)')),
                ('weight', models.FloatField(verbose_name='Weight (g)')),
                ('width', models.FloatField(verbose_name='Width (mm)')),
                ('height', models.FloatField(verbose_name='Height (mm)')),
                ('depth', models.FloatField(verbose_name='Depth (mm)')),
                ('battery_volume', models.IntegerField(verbose_name='Battery volume (mAh)')),
                ('wirelesses', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('bluetooth', 'Bluetooth'), ('nfc', 'NFC'), ('wifi', 'Wi-Fi'), ('infraded port', 'Infraded port'), ('wireless charger', 'Wireless charger')], max_length=49, null=True, verbose_name='Wireless')),
                ('connectors', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('2.5jack', '2.5 mm Mini-Jack'), ('3.5jack', '3.5 mm Mini-Jack'), ('lightning', 'Lightning'), ('microusb', 'Micro-USB'), ('miniusb', 'Mini-USB'), ('usb', 'USB'), ('typec', 'USB Type-C'), ('microhdmi', 'Micro-HDMI')], max_length=62, null=True, verbose_name='Connectors')),
                ('security', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('faceid', 'Face-ID'), ('fingerprint', 'Fingerprint')], max_length=18, null=True, verbose_name='Security')),
                ('protection', models.CharField(max_length=20, verbose_name='Protection')),
                ('sensors_en', models.TextField(verbose_name='Sensors (en)')),
                ('sensors_ua', models.TextField(verbose_name='Sensors (ua)')),
                ('features', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('flashlight', 'Flashlight'), ('rounded edges', 'Rounded edges'), ('thermal imager', 'Thermal imager'), ('folds up', 'Folds up'), ('waterproof', 'Waterproof'), ('removable battery', 'Removable battery'), ('armored', 'Armored')], max_length=85, null=True, verbose_name='Features')),
                ('additions_en', models.TextField(blank=True, null=True, verbose_name='Additions (en)')),
                ('additions_ua', models.TextField(blank=True, null=True, verbose_name='Additions (ua)')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='characteristic', to='main.product', verbose_name='Product')),
            ],
        ),
        migrations.CreateModel(
            name='CartProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(max_length=6, verbose_name='Color')),
                ('quantity', models.IntegerField(verbose_name='Quantity')),
                ('datetime', models.DateTimeField(verbose_name='Date and time')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_products', to='main.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_products', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='BrowsedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(verbose_name='Date and time')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users_browsed', to='main.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='browsed_products', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='favorites',
            field=models.ManyToManyField(blank=True, related_name='favorites', to='main.Product', verbose_name='Favorites'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
